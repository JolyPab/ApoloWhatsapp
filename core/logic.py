import logging
from utils.redis_client import redis_client
from utils.twilio_client import twilio_client
from utils.property_extractor import property_extractor
from core.llm_chain import llm_chain
from core.lead_detector import lead_detector
from core.smart_router import smart_router

logger = logging.getLogger(__name__)

def process_message(from_number: str, message_body: str, message_sid: str):
    """
    Main logic for processing an incoming WhatsApp message.
    """
    # 1. Deduplication
    if redis_client.is_duplicate(message_sid):
        return

    logger.info(f"Processing message from {from_number}: '{message_body}'")

    # 2. Smart Routing Analysis
    routing_analysis = smart_router.analyze_message(message_body)
    logger.info(f"Routing strategy: {routing_analysis['strategy']} - {routing_analysis['routing_reason']}")

    # 3. Lead Detection
    lead_info = lead_detector.analyze_message(message_body)

    def _is_real_lead(info: dict) -> bool:
        """–°—Ç—Ä–æ–∂–µ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∞–ª—å–Ω—ã–π –ª–∏–¥:
        - visit: –≤—Å–µ–≥–¥–∞ –ª–∏–¥
        - buy/rent: –ª–∏–¥ –¢–û–õ–¨–ö–û –µ—Å–ª–∏ –µ—Å—Ç—å —è–≤–Ω–æ–µ –∂–µ–ª–∞–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞/–≤—Å—Ç—Ä–µ—á–∏
          –ò/–ò–õ–ò —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ (property_mentions –∏–ª–∏ —É–∫–∞–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞)
        –ü—Ä–∏–º–µ—Ä—ã –ù–ï –ª–∏–¥–∞: ¬´Quiero comprar un departamento en Canc√∫n¬ª, ¬´Busco casa en Canc√∫n¬ª.
        –ü—Ä–∏–º–µ—Ä—ã –ª–∏–¥–∞: ¬´¬øPuedo agendar una visita?¬ª, ¬´Ll√°mame para ver este depto¬ª, ¬´Quiero ver esta casa ma√±ana¬ª.
        """
        if not info.get("is_lead"):
            return False
        interest = info.get("interest")
        if interest == "visit":
            return True
        if interest in ("buy", "rent"):
            lowered = message_body.lower()
            contact_kw = [
                "llamame", "ll√°mame", "llamar", "cont√°ctame", "contactame", "contactar",
                "agendar", "agenda", "cita", "ver", "visita", "mostrar"
            ]
            specific_kw = [
                "esta", "este", "esa", "ese", "la casa", "el departamento",
                "esta casa", "este departamento", "inmuebles24", 
            ]
            has_contact_intent = any(k in lowered for k in contact_kw)
            has_specific_ref = bool(info.get("property_mentions")) or any(k in lowered for k in specific_kw)
            # –î–ª—è buy/rent —Ç—Ä–µ–±—É–µ–º –ª–∏–±–æ —è–≤–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∫–æ–Ω—Ç–∞–∫—Ç–∞/–≤—Å—Ç—Ä–µ—á–∏, –ª–∏–±–æ –∫–æ–Ω–∫—Ä–µ—Ç–∏–∫—É –ø–æ –æ–±—ä–µ–∫—Ç—É
            return has_contact_intent or has_specific_ref
        return False

    if _is_real_lead(lead_info):
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ª–∏–¥: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–≥–µ–Ω—Ç—É –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –¥–∞–ª—å—à–µ –æ—Ç–≤–µ—Ç –Ω–µ –Ω—É–∂–µ–Ω
        handle_lead(from_number, message_body, lead_info)
        return

    # 4. Generate response based on routing strategy
    if routing_analysis['strategy'] == 'consultant':
        # –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º –¥–ª—è –≤–Ω–µ—à–Ω–∏—Ö —Å—Å—ã–ª–æ–∫
        extracted_info = routing_analysis['extracted_info']
        smart_query = smart_router.generate_smart_query(message_body, extracted_info)
        bot_response = llm_chain.invoke_chain(smart_query, from_number)
        bot_response = smart_router.format_consultant_response(bot_response, extracted_info)
    else:
        # –û–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ø–∞–º—è—Ç–∏ —á–∞—Ç–∞
        bot_response = llm_chain.invoke_chain(message_body, from_number)

    # 5. Decide whether to send photos (only for real estate-related queries)
    def _explicit_photo_request(text: str) -> bool:
        text_l = text.lower()
        return any(k in text_l for k in ["foto", "fotos", "im√°gen", "imagenes", "im√°genes", "mandame fotos", "env√≠ame fotos", "enviame fotos"])  # noqa

    def _has_specific_reference(text: str) -> bool:
        text_l = text.lower()
        specific_kw = [
            "esta", "este", "esa", "ese", "la casa", "el departamento", "residencial", "calle", "avenida", "av.", "boulevard"
        ]
        return any(k in text_l for k in specific_kw)

    should_attach_photos = (
        routing_analysis['strategy'] in ('consultant',)
        or _is_real_lead(lead_info)
        or _explicit_photo_request(message_body)
        or _has_specific_reference(message_body)
    )

    if should_attach_photos:
        # Extract property information from the bot response and try to send photos
        properties_mentioned = property_extractor.extract_property_info_from_response(bot_response)

        if properties_mentioned:
            # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã (match_score >= 3)
            strong_matches = [p for p in properties_mentioned if p.get('match_score', 0) >= 3]
            first_property = (strong_matches or properties_mentioned)[0]
            photos = first_property.get('photos', [])

            if photos:
                twilio_client.send_whatsapp_message_with_multiple_photos(
                    from_number, bot_response, photos
                )
                logger.info(f"Response with {len(photos)} photos sent to {from_number}")
                return

    # Fallback: send text-only response
    twilio_client.send_whatsapp_message(from_number, bot_response)
    logger.info(f"Response sent to {from_number}")


def handle_lead(user_number: str, original_message: str, lead_data: dict):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ª–∏–¥: —É–≤–µ–¥–æ–º–ª—è–µ–º –∞–≥–µ–Ω—Ç–∞ –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."""
    logger.info(f"LEAD DETECTED for user {user_number}!")
    logger.info(f"Lead Details: {lead_data}")

    # 1. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (–æ–¥–Ω–æ –∫–æ—Ä–æ—Ç–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ)
    interest = lead_data.get("interest")
    if interest == "visit":
        user_reply = (
            "¬°Excelente! Un asesor se pondr√° en contacto contigo en breve para coordinar los detalles de tu visita."
        )
    elif interest == "buy":
        user_reply = "¬°Perfecto! Gracias por tu inter√©s en comprar. Un asesor te contactar√° pronto."
    elif interest == "rent":
        user_reply = "¬°Genial! Un asesor se pondr√° en contacto contigo para ayudarte con la renta."
    else:
        user_reply = "¬°Gracias! Un asesor te contactar√° en breve para m√°s detalles."

    twilio_client.send_whatsapp_message(user_number, user_reply)

    # 2. –ì–æ—Ç–æ–≤–∏–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–≥–µ–Ω—Ç—É (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –Ω–æ–º–µ—Ä –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏)
    from config import settings
    agent_number = settings.AGENT_WHATSAPP_NUMBER
    if agent_number:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –±–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        properties_info = property_extractor.extract_property_info_from_response(original_message)
        
        agent_msg = (
            f"üö® *LEAD ALERT - Century21 Apolo*\n\n"
            f"üì± *Cliente WhatsApp:* {user_number}\n"
            f"üéØ *Tipo de inter√©s:* {lead_data.get('interest').upper()}\n"
            f"üí¨ *Mensaje original:*\n{original_message}\n\n"
        )
        
        if lead_data.get('property_mentions'):
            agent_msg += f"üè† *Propiedades mencionadas:* {', '.join(lead_data.get('property_mentions', []))}\n\n"
        
        if properties_info:
            prop = properties_info[0]  # Primera propiedad encontrada
            agent_msg += (
                f"üîç *Propiedad relacionada:*\n"
                f"‚Ä¢ {prop.get('title', 'N/A')}\n"
                f"‚Ä¢ {prop.get('price', 'N/A')}\n"
                f"‚Ä¢ {prop.get('address', 'N/A')}\n"
                f"‚Ä¢ Agente: {prop.get('agent_name', 'N/A')}\n"
                f"‚Ä¢ Tel: {prop.get('agent_phone', 'N/A')}\n\n"
            )
        
        agent_msg += "‚ö° *Acci√≥n requerida:* Contactar al cliente lo antes posible"
        
        twilio_client.send_whatsapp_message(agent_number, agent_msg)
        logger.info(f"Enhanced lead notification sent to agent {agent_number}")
    else:
        logger.warning("AGENT_WHATSAPP_NUMBER –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω ‚Äì —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–≥–µ–Ω—Ç—É –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ") 