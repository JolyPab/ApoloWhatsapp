#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ RAG —Å–∏—Å—Ç–µ–º—ã Century 21 Apolo Bot
"""

import os
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

def test_config():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã"""
    print("üîß –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
    
    required_vars = [
        'AZURE_OPENAI_ENDPOINT',
        'AZURE_OPENAI_API_KEY', 
        'AZURE_EMBEDDINGS_ENDPOINT',
        'AZURE_EMBEDDINGS_API_KEY'
    ]
    
    missing_vars = []
    for var in required_vars:
        if not os.getenv(var):
            missing_vars.append(var)
        else:
            print(f"‚úÖ {var}: –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ")
    
    if missing_vars:
        print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: {missing_vars}")
        return False
    
    return True

def test_faiss_index():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ FAISS –∏–Ω–¥–µ–∫—Å—ã –¥–æ—Å—Ç—É–ø–Ω—ã"""
    print("\nüìö –ü—Ä–æ–≤–µ—Ä–∫–∞ FAISS –∏–Ω–¥–µ–∫—Å–æ–≤...")
    
    faiss_path = os.getenv('FAISS_INDEX_PATH', 'apolo_faiss')
    
    if not os.path.exists(faiss_path):
        print(f"‚ùå –ü–∞–ø–∫–∞ FAISS –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {faiss_path}")
        return False
    
    required_files = ['index.faiss', 'index.pkl']
    for file in required_files:
        file_path = os.path.join(faiss_path, file)
        if os.path.exists(file_path):
            size = os.path.getsize(file_path) / (1024*1024)  # MB
            print(f"‚úÖ {file}: {size:.1f} MB")
        else:
            print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file}")
            return False
    
    return True

def test_llm_chain():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º LLM —Ü–µ–ø–æ—á–∫—É"""
    print("\nü§ñ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ LLM —Ü–µ–ø–æ—á–∫–∏...")
    
    try:
        from core.llm_chain import llm_chain
        
        # –¢–µ—Å—Ç–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å
        test_question = "–†–∞—Å—Å–∫–∞–∂–∏ –æ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ Century 21 Apolo"
        print(f"‚ùì –í–æ–ø—Ä–æ—Å: {test_question}")
        
        # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç
        response = llm_chain.invoke_chain(test_question, [])
        print(f"üí¨ –û—Ç–≤–µ—Ç: {response[:200]}...")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ LLM —Ü–µ–ø–æ—á–∫–∏: {e}")
        return False

def test_lead_detection():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–µ—Ç–µ–∫—Ü–∏—é –ª–∏–¥–æ–≤"""
    print("\nüéØ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ—Ç–µ–∫—Ü–∏–∏ –ª–∏–¥–æ–≤...")
    
    try:
        from core.lead_detector import lead_detector
        
        test_messages = [
            "–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?",
            "–•–æ—á—É –∫—É–ø–∏—Ç—å –∫–≤–∞—Ä—Ç–∏—Ä—É –≤ –ö–∞–Ω–∫—É–Ω–µ",
            "–ú–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–æ–º –∑–∞–≤—Ç—Ä–∞?",
            "–°–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç –∞—Ä–µ–Ω–¥–∞ –æ—Ñ–∏—Å–∞?"
        ]
        
        for msg in test_messages:
            result = lead_detector.analyze_message(msg)
            is_lead = result.get('is_lead', False)
            interest = result.get('interest', 'none')
            print(f"üìù '{msg}' ‚Üí –õ–∏–¥: {is_lead}, –ò–Ω—Ç–µ—Ä–µ—Å: {interest}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –¥–µ—Ç–µ–∫—Ü–∏–∏ –ª–∏–¥–æ–≤: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Century 21 Apolo Bot")
    print("=" * 50)
    
    # –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ —Ç–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
    tests = [
        ("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è", test_config),
        ("FAISS –∏–Ω–¥–µ–∫—Å—ã", test_faiss_index),
        ("LLM —Ü–µ–ø–æ—á–∫–∞", test_llm_chain),
        ("–î–µ—Ç–µ–∫—Ü–∏—è –ª–∏–¥–æ–≤", test_lead_detection)
    ]
    
    results = []
    for test_name, test_func in tests:
        try:
            result = test_func()
            results.append((test_name, result))
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ {test_name}: {e}")
            results.append((test_name, False))
    
    # –ò—Ç–æ–≥–∏
    print("\n" + "=" * 50)
    print("üìä –ò–¢–û–ì–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
    
    passed = 0
    for test_name, result in results:
        status = "‚úÖ –ü–†–û–ô–î–ï–ù" if result else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
        print(f"{status} {test_name}")
        if result:
            passed += 1
    
    print(f"\n–†–µ–∑—É–ª—å—Ç–∞—Ç: {passed}/{len(results)} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed == len(results):
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã! –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    else:
        print("‚ö†Ô∏è  –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã, —Ç—Ä–µ–±—É—é—â–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è.")

if __name__ == "__main__":
    main() 