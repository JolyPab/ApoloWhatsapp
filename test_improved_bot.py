#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–ª—É—á—à–µ–Ω–∏–π –±–æ—Ç–∞ Century21 Apolo
"""
import os
import sys
import json
import logging
from dotenv import load_dotenv

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

def test_property_extractor():
    """–¢–µ—Å—Ç —ç–∫—Å—Ç—Ä–∞–∫—Ç–æ—Ä–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏"""
    print("\n=== –¢–ï–°–¢ PROPERTY EXTRACTOR ===")
    
    try:
        from utils.property_extractor import property_extractor
        
        # –¢–µ—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç —Å —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏
        test_response = "Tenemos una hermosa casa en La Florida, Naucalpan por $7,900,000"
        
        properties = property_extractor.extract_property_info_from_response(test_response)
        
        print(f"–ù–∞–π–¥–µ–Ω–æ –æ–±—ä–µ–∫—Ç–æ–≤ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏: {len(properties)}")
        
        if properties:
            prop = properties[0]
            print(f"–ü–µ—Ä–≤—ã–π –æ–±—ä–µ–∫—Ç:")
            print(f"  - –ù–∞–∑–≤–∞–Ω–∏–µ: {prop.get('title')}")
            print(f"  - –¶–µ–Ω–∞: {prop.get('price')}")
            print(f"  - –ê–¥—Ä–µ—Å: {prop.get('address')}")
            print(f"  - –§–æ—Ç–æ: {len(prop.get('photos', []))} —à—Ç.")
            print(f"  - –ê–≥–µ–Ω—Ç: {prop.get('agent_name')}")
        
        return True
        
    except Exception as e:
        print(f"–û–®–ò–ë–ö–ê –≤ —Ç–µ—Å—Ç–µ property_extractor: {e}")
        return False

def test_lead_detector():
    """–¢–µ—Å—Ç –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞ –ª–∏–¥–æ–≤"""
    print("\n=== –¢–ï–°–¢ LEAD DETECTOR ===")
    
    try:
        from core.lead_detector import lead_detector
        
        test_messages = [
            "Hola, me interesa esta casa",
            "¬øPuedo agendar una visita?",
            "Quiero comprar un departamento",
            "¬øCu√°nto cuesta rentar?",
            "Hola, ¬øc√≥mo est√°n?",
            "Gracias por la informaci√≥n"
        ]
        
        for msg in test_messages:
            try:
                result = lead_detector.analyze_message(msg)
                print(f"Mensaje: '{msg}'")
                print(f"  - Es lead: {result.get('is_lead')}")
                print(f"  - Tipo: {result.get('interest')}")
                print(f"  - Propiedades: {result.get('property_mentions', [])}")
                print()
            except Exception as e:
                print(f"Error analyzing message '{msg}': {e}")
        
        return True
        
    except Exception as e:
        print(f"–û–®–ò–ë–ö–ê –≤ —Ç–µ—Å—Ç–µ lead_detector: {e}")
        return False

def test_twilio_client():
    """–¢–µ—Å—Ç Twilio –∫–ª–∏–µ–Ω—Ç–∞ (–±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏)"""
    print("\n=== –¢–ï–°–¢ TWILIO CLIENT ===")
    
    try:
        from utils.twilio_client import TwilioClient
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–ª–∏–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è
        if not all([os.getenv('TWILIO_ACCOUNT_SID'), os.getenv('TWILIO_AUTH_TOKEN'), os.getenv('TWILIO_PHONE_NUMBER')]):
            print("‚ö†Ô∏è  Twilio credentials –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã - —Ç–µ—Å—Ç –ø—Ä–æ–ø—É—â–µ–Ω")
            return True
        
        client = TwilioClient()
        print("‚úÖ Twilio –∫–ª–∏–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ç–æ–¥—ã (–±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏)
        test_photos = [
            "https://century21apolo.com/wp-content/uploads/2024/12/test-1.jpg",
            "https://century21apolo.com/wp-content/uploads/2024/12/test-2.jpg"
        ]
        
        print(f"‚úÖ –ú–µ—Ç–æ–¥ send_whatsapp_message_with_multiple_photos –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é")
        print(f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {len(test_photos)}")
        
        return True
        
    except Exception as e:
        print(f"–û–®–ò–ë–ö–ê –≤ —Ç–µ—Å—Ç–µ twilio_client: {e}")
        return False

def test_smart_router():
    """–¢–µ—Å—Ç —É–º–Ω–æ–≥–æ —Ä–æ—É—Ç–µ—Ä–∞"""
    print("\n=== –¢–ï–°–¢ SMART ROUTER ===")
    
    try:
        from core.smart_router import smart_router
        
        test_messages = [
            "Hola",
            "https://inmuebles24.com/propiedades/casa-en-cancun-123.html",
            "Me interesa una casa en residencial rio"
        ]
        
        for msg in test_messages:
            analysis = smart_router.analyze_message(msg)
            print(f"Mensaje: '{msg}'")
            print(f"  - –°—Ç—Ä–∞—Ç–µ–≥–∏—è: {analysis['strategy']}")
            print(f"  - –ü—Ä–∏—á–∏–Ω–∞: {analysis['routing_reason']}")
            print(f"  - –í–Ω–µ—à–Ω—è—è —Å—Å—ã–ª–∫–∞: {analysis['has_external_link']}")
            if analysis['extracted_info']:
                print(f"  - –ò–∑–≤–ª–µ—á–µ–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: {analysis['extracted_info']}")
            print()
        
        return True
        
    except Exception as e:
        print(f"–û–®–ò–ë–ö–ê –≤ —Ç–µ—Å—Ç–µ smart_router: {e}")
        return False

def test_config():
    """–¢–µ—Å—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    print("\n=== –¢–ï–°–¢ –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò ===")
    
    try:
        from config import settings
        
        required_settings = [
            'AZURE_OPENAI_ENDPOINT',
            'AZURE_OPENAI_API_KEY', 
            'AZURE_OPENAI_DEPLOYMENT_NAME',
            'FAISS_INDEX_PATH'
        ]
        
        for setting in required_settings:
            value = getattr(settings, setting, None)
            if value:
                print(f"‚úÖ {setting}: –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            else:
                print(f"‚ùå {setting}: –ù–ï –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª FAISS
        if os.path.exists(settings.FAISS_INDEX_PATH):
            print(f"‚úÖ FAISS –∏–Ω–¥–µ–∫—Å –Ω–∞–π–¥–µ–Ω: {settings.FAISS_INDEX_PATH}")
        else:
            print(f"‚ùå FAISS –∏–Ω–¥–µ–∫—Å –ù–ï –Ω–∞–π–¥–µ–Ω: {settings.FAISS_INDEX_PATH}")
        
        return True
        
    except Exception as e:
        print(f"–û–®–ò–ë–ö–ê –≤ —Ç–µ—Å—Ç–µ config: {e}")
        return False

def main():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
    print("ü§ñ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –£–õ–£–ß–®–ï–ù–ù–û–ì–û –ë–û–¢–ê CENTURY21 APOLO")
    print("=" * 60)
    
    tests = [
        ("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è", test_config),
        ("Property Extractor", test_property_extractor),
        ("Lead Detector", test_lead_detector),
        ("Smart Router", test_smart_router),
        ("Twilio Client", test_twilio_client),
    ]
    
    results = []
    
    for test_name, test_func in tests:
        try:
            result = test_func()
            results.append((test_name, result))
        except Exception as e:
            print(f"–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –≤ —Ç–µ—Å—Ç–µ {test_name}: {e}")
            results.append((test_name, False))
    
    print("\n" + "=" * 60)
    print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
    print("=" * 60)
    
    passed = 0
    total = len(results)
    
    for test_name, result in results:
        status = "‚úÖ –ü–†–û–®–ï–õ" if result else "‚ùå –û–®–ò–ë–ö–ê"
        print(f"{test_name}: {status}")
        if result:
            passed += 1
    
    print(f"\n–ò—Ç–æ–≥–æ: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ")
    
    if passed == total:
        print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û!")
        print("–ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—é.")
    else:
        print(f"\n‚ö†Ô∏è  {total - passed} —Ç–µ—Å—Ç–æ–≤ –Ω–µ –ø—Ä–æ—à–ª–∏.")
        print("–¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞.")

if __name__ == "__main__":
    main()