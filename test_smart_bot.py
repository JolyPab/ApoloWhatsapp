#!/usr/bin/env python3
"""
–¢–µ—Å—Ç —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –±–æ—Ç–∞ —Å —É–º–Ω—ã–º —Ä–æ—É—Ç–∏–Ω–≥–æ–º
"""

import os
from dotenv import load_dotenv

load_dotenv()

def test_smart_routing():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º —É–º–Ω—ã–π —Ä–æ—É—Ç–∏–Ω–≥"""
    print("üß† –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –£–ú–ù–û–ì–û –†–û–£–¢–ò–ù–ì–ê")
    print("=" * 60)
    
    from core.smart_router import smart_router
    
    test_messages = [
        {
            'message': '¬°Hola! Quiero que se comuniquen conmigo por este inmueble en Inmuebles24 https://www.inmuebles24.com/propiedades/clasificado/veclcapa-hermosa-casa-en-residencial-rio-cancun-146144201.html',
            'expected_strategy': 'consultant'
        },
        {
            'message': 'Hola, busco una casa en renta en Canc√∫n',
            'expected_strategy': 'direct'
        },
        {
            'message': 'Me interesa el departamento en Avenida Bonampak',
            'expected_strategy': 'hybrid'
        }
    ]
    
    for i, test in enumerate(test_messages, 1):
        print(f"\nüìù –¢–ï–°–¢ {i}:")
        print(f"   –°–æ–æ–±—â–µ–Ω–∏–µ: {test['message'][:60]}...")
        
        analysis = smart_router.analyze_message(test['message'])
        
        print(f"   –°—Ç—Ä–∞—Ç–µ–≥–∏—è: {analysis['strategy']}")
        print(f"   –û–∂–∏–¥–∞–ª–∞—Å—å: {test['expected_strategy']}")
        print(f"   –ü—Ä–∏—á–∏–Ω–∞: {analysis['routing_reason']}")
        
        if analysis['extracted_info']:
            print(f"   –ò–∑–≤–ª–µ—á—ë–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:")
            for key, value in analysis['extracted_info'].items():
                print(f"     {key}: {value}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å
        if analysis['strategy'] == test['expected_strategy']:
            print("   ‚úÖ –ü–†–û–ô–î–ï–ù")
        else:
            print("   ‚ùå –ü–†–û–í–ê–õ–ï–ù")

def test_full_pipeline():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π –ø–∞–π–ø–ª–∞–π–Ω –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    print("\nüöÄ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–û–õ–ù–û–ì–û –ü–ê–ô–ü–õ–ê–ô–ù–ê")
    print("=" * 60)
    
    from core.logic import process_message
    from unittest.mock import patch
    
    # –ú–æ–∫–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π
    with patch('core.logic.twilio_client.send_whatsapp_message') as mock_send:
        with patch('core.logic.redis_client.is_duplicate', return_value=False):
            with patch('core.logic.redis_client.get_session_history', return_value=[]):
                with patch('core.logic.redis_client.save_session_history'):
                    
                    test_message = "¬°Hola! Quiero que se comuniquen conmigo por este inmueble en Inmuebles24 https://www.inmuebles24.com/propiedades/clasificado/veclcapa-hermosa-casa-en-residencial-rio-cancun-146144201.html"
                    
                    print(f"üì± –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ:")
                    print(f"   {test_message[:60]}...")
                    
                    try:
                        process_message(
                            from_number="+525555555555",
                            message_body=test_message,
                            message_sid="test_sid_123"
                        )
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
                        if mock_send.called:
                            sent_message = mock_send.call_args[0][1]  # –í—Ç–æ—Ä–æ–π –∞—Ä–≥—É–º–µ–Ω—Ç - —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
                            print(f"\nüí¨ –û—Ç–≤–µ—Ç –±–æ—Ç–∞:")
                            print(f"   {sent_message[:200]}...")
                            
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –æ—Ç–≤–µ—Ç–∞
                            checks = [
                                ("–£–ø–æ–º–∏–Ω–∞–Ω–∏–µ Inmuebles24", "inmuebles24" in sent_message.lower()),
                                ("–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤", any(word in sent_message.lower() for word in ["opciones", "similares", "tenemos"])),
                                ("–ü—Ä–∏–∑—ã–≤ –∫ –¥–µ–π—Å—Ç–≤–∏—é", "?" in sent_message),
                                ("–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ç–∏–≤–Ω—ã–π —Ç–æ–Ω", any(word in sent_message.lower() for word in ["ayude", "encontrar", "presupuesto"]))
                            ]
                            
                            print(f"\n‚úÖ –ü–†–û–í–ï–†–ö–ò –ö–ê–ß–ï–°–¢–í–ê –û–¢–í–ï–¢–ê:")
                            for check_name, passed in checks:
                                status = "‚úÖ" if passed else "‚ùå"
                                print(f"   {status} {check_name}")
                            
                            passed_checks = sum(1 for _, passed in checks if passed)
                            print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {passed_checks}/{len(checks)} –ø—Ä–æ–≤–µ—Ä–æ–∫ –ø—Ä–æ–π–¥–µ–Ω–æ")
                            
                            return passed_checks == len(checks)
                        else:
                            print("‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
                            return False
                            
                    except Exception as e:
                        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")
                        return False

def test_comparison():
    """–°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å—Ç–∞—Ä—ã–π –∏ –Ω–æ–≤—ã–π –ø–æ–¥—Ö–æ–¥—ã"""
    print("\n‚öñÔ∏è  –°–†–ê–í–ù–ï–ù–ò–ï –ü–û–î–•–û–î–û–í")
    print("=" * 60)
    
    from core.llm_chain import llm_chain
    from core.smart_router import smart_router
    
    test_message = "¬°Hola! Quiero que se comuniquen conmigo por este inmueble en Inmuebles24 https://www.inmuebles24.com/propiedades/clasificado/veclcapa-hermosa-casa-en-residencial-rio-cancun-146144201.html"
    
    print("üìã –°–¢–ê–†–´–ô –ü–û–î–•–û–î (–ø—Ä—è–º–æ–π –∑–∞–ø—Ä–æ—Å –∫ RAG):")
    try:
        old_response = llm_chain.invoke_chain(test_message, [])
        print(f"   {old_response[:150]}...")
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
    
    print("\nüß† –ù–û–í–´–ô –ü–û–î–•–û–î (—É–º–Ω—ã–π —Ä–æ—É—Ç–∏–Ω–≥):")
    try:
        analysis = smart_router.analyze_message(test_message)
        if analysis['strategy'] == 'consultant':
            extracted_info = analysis['extracted_info']
            smart_query = smart_router.generate_smart_query(test_message, extracted_info)
            rag_response = llm_chain.invoke_chain(smart_query, [])
            new_response = smart_router.format_consultant_response(rag_response, extracted_info)
            print(f"   {new_response[:150]}...")
        else:
            print("   –ù–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º")
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    test_smart_routing()
    test_comparison()
    success = test_full_pipeline()
    
    print("\nüéØ –ò–¢–û–ì–û–í–´–ï –í–´–í–û–î–´:")
    print("=" * 60)
    if success:
        print("‚úÖ –£–º–Ω—ã–π —Ä–æ—É—Ç–∏–Ω–≥ —Ä–∞–±–æ—Ç–∞–µ—Ç!")
        print("‚úÖ –ë–æ—Ç —Ç–µ–ø–µ—Ä—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–Ω–µ—à–Ω–∏–µ —Å—Å—ã–ª–∫–∏")
        print("‚úÖ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç—Å—è")
        print("‚úÖ –ö–∞—á–µ—Å—Ç–≤–æ –æ—Ç–≤–µ—Ç–æ–≤ —É–ª—É—á—à–µ–Ω–æ")
    else:
        print("‚ùå –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã –≤ —Ä–∞–±–æ—Ç–µ —É–º–Ω–æ–≥–æ —Ä–æ—É—Ç–∏–Ω–≥–∞")
    
    print("\nüöÄ –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:")
    print("   1. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ Twilio –∫—Ä–µ–¥–∞–º–∏")
    print("   2. –î–æ–±–∞–≤–∏—Ç—å –±–æ–ª—å—à–µ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –¥–ª—è –¥—Ä—É–≥–∏—Ö —Å–∞–π—Ç–æ–≤")
    print("   3. –£–ª—É—á—à–∏—Ç—å –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏–∑ URL")
    print("   4. –ù–∞—Å—Ç—Ä–æ–∏—Ç—å A/B —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–æ–≤")

if __name__ == "__main__":
    main() 