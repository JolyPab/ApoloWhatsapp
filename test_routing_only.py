#!/usr/bin/env python3
"""
–£–ø—Ä–æ—â—ë–Ω–Ω—ã–π —Ç–µ—Å—Ç —É–º–Ω–æ–≥–æ —Ä–æ—É—Ç–∏–Ω–≥–∞ –±–µ–∑ Twilio –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
"""

import os
from dotenv import load_dotenv

load_dotenv()

def test_routing_logic():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –ª–æ–≥–∏–∫—É —Ä–æ—É—Ç–∏–Ω–≥–∞"""
    print("üß† –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –£–ú–ù–û–ì–û –†–û–£–¢–ò–ù–ì–ê")
    print("=" * 60)
    
    from core.smart_router import smart_router
    
    test_cases = [
        {
            'name': 'Inmuebles24 —Å—Å—ã–ª–∫–∞',
            'message': '¬°Hola! Quiero que se comuniquen conmigo por este inmueble en Inmuebles24 https://www.inmuebles24.com/propiedades/clasificado/veclcapa-hermosa-casa-en-residencial-rio-cancun-146144201.html',
            'expected_strategy': 'consultant',
            'expected_info': ['Inmuebles24', 'Canc√∫n', 'casa']
        },
        {
            'name': '–û–±—ã—á–Ω—ã–π –∑–∞–ø—Ä–æ—Å',
            'message': 'Hola, busco una casa en renta en Canc√∫n',
            'expected_strategy': 'direct',
            'expected_info': []
        },
        {
            'name': '–ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –∞–¥—Ä–µ—Å', 
            'message': 'Me interesa el departamento en Avenida Bonampak',
            'expected_strategy': 'hybrid',
            'expected_info': []
        },
        {
            'name': '–î—Ä—É–≥–∞—è –≤–Ω–µ—à–Ω—è—è —Å—Å—ã–ª–∫–∞',
            'message': 'Vi esta casa en MercadoLibre: https://mercadolibre.com.mx/casa-residencial-cancun',
            'expected_strategy': 'direct',  # –ü–æ–∫–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º
            'expected_info': []
        }
    ]
    
    passed = 0
    for i, test in enumerate(test_cases, 1):
        print(f"\nüìù –¢–ï–°–¢ {i}: {test['name']}")
        print(f"   –°–æ–æ–±—â–µ–Ω–∏–µ: {test['message'][:50]}...")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º
        analysis = smart_router.analyze_message(test['message'])
        
        print(f"   –°—Ç—Ä–∞—Ç–µ–≥–∏—è: {analysis['strategy']} (–æ–∂–∏–¥–∞–ª–∞—Å—å: {test['expected_strategy']})")
        print(f"   –ü—Ä–∏—á–∏–Ω–∞: {analysis['routing_reason']}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–≤–ª–µ—á—ë–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        if analysis['extracted_info']:
            print(f"   –ò–∑–≤–ª–µ—á–µ–Ω–æ:")
            for key, value in analysis['extracted_info'].items():
                print(f"     {key}: {value}")
                
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å
        strategy_correct = analysis['strategy'] == test['expected_strategy']
        if strategy_correct:
            print("   ‚úÖ –°–¢–†–ê–¢–ï–ì–ò–Ø –ü–†–ê–í–ò–õ–¨–ù–ê–Ø")
            passed += 1
        else:
            print("   ‚ùå –°–¢–†–ê–¢–ï–ì–ò–Ø –ù–ï–ü–†–ê–í–ò–õ–¨–ù–ê–Ø")
    
    print(f"\nüìä –ò–¢–û–ì: {passed}/{len(test_cases)} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    return passed == len(test_cases)

def test_url_parsing():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–∞—Ä—Å–∏–Ω–≥ URL"""
    print("\nüîç –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–ê–†–°–ò–ù–ì–ê URL")
    print("=" * 60)
    
    from core.smart_router import smart_router
    
    test_urls = [
        {
            'url': 'https://www.inmuebles24.com/propiedades/clasificado/veclcapa-hermosa-casa-en-residencial-rio-cancun-146144201.html',
            'expected': {
                'location': 'Canc√∫n',
                'property_type': 'casa',
                'area': 'Residencial Rio'
            }
        },
        {
            'url': 'https://www.inmuebles24.com/propiedades/departamento-en-renta-zona-hotelera-cancun-123456.html',
            'expected': {
                'location': 'Canc√∫n', 
                'property_type': 'departamento'
            }
        }
    ]
    
    for i, test in enumerate(test_urls, 1):
        print(f"\nüîó URL –¢–ï–°–¢ {i}:")
        print(f"   URL: {test['url']}")
        
        # –°–æ–∑–¥–∞—ë–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        test_message = f"Hola, me interesa esta propiedad: {test['url']}"
        analysis = smart_router.analyze_message(test_message)
        
        if analysis['extracted_info']:
            extracted = analysis['extracted_info']
            print(f"   –ò–∑–≤–ª–µ—á–µ–Ω–æ:")
            for key, value in extracted.items():
                if value:
                    print(f"     {key}: {value}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–∂–∏–¥–∞–µ–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
            print(f"   –ü—Ä–æ–≤–µ—Ä–∫–∏:")
            for key, expected_value in test['expected'].items():
                actual_value = extracted.get(key)
                if actual_value and expected_value.lower() in actual_value.lower():
                    print(f"     ‚úÖ {key}: –Ω–∞–π–¥–µ–Ω–æ '{actual_value}'")
                else:
                    print(f"     ‚ùå {key}: –æ–∂–∏–¥–∞–ª–æ—Å—å '{expected_value}', –ø–æ–ª—É—á–µ–Ω–æ '{actual_value}'")
        else:
            print("   ‚ùå –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ –∏–∑–≤–ª–µ—á–µ–Ω–∞")

def test_smart_query_generation():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —É–º–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤"""
    print("\nüí° –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ì–ï–ù–ï–†–ê–¶–ò–ò –£–ú–ù–´–• –ó–ê–ü–†–û–°–û–í")
    print("=" * 60)
    
    from core.smart_router import smart_router
    
    test_data = [
        {
            'info': {'location': 'Canc√∫n', 'property_type': 'casa', 'area': 'Residencial Rio'},
            'original': 'Quiero esta casa'
        },
        {
            'info': {'location': 'Canc√∫n', 'property_type': 'departamento'},
            'original': 'Me interesa este departamento'
        },
        {
            'info': {'location': 'Playa del Carmen'},
            'original': 'Busco algo aqu√≠'
        }
    ]
    
    for i, test in enumerate(test_data, 1):
        print(f"\nüéØ –ó–ê–ü–†–û–° {i}:")
        print(f"   –û—Ä–∏–≥–∏–Ω–∞–ª: {test['original']}")
        print(f"   –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: {test['info']}")
        
        smart_query = smart_router.generate_smart_query(test['original'], test['info'])
        print(f"   –£–º–Ω—ã–π –∑–∞–ø—Ä–æ—Å: {smart_query}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–∞
        query_lower = smart_query.lower()
        checks = [
            ("–£–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Ç–∏–ø–∞", any(prop_type in query_lower for prop_type in ['casa', 'departamento', 'propiedad'])),
            ("–£–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ª–æ–∫–∞—Ü–∏–∏", any(loc in query_lower for loc in [test['info'].get('location', '').lower(), test['info'].get('area', '').lower()] if loc)),
            ("–ü–æ–∏—Å–∫–æ–≤—ã–µ —Å–ª–æ–≤–∞", any(word in query_lower for word in ['similares', 'opciones', 'disponibles', 'tenemos']))
        ]
        
        for check_name, passed in checks:
            status = "‚úÖ" if passed else "‚ùå"
            print(f"     {status} {check_name}")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    success1 = test_routing_logic()
    test_url_parsing()
    test_smart_query_generation()
    
    print("\nüéØ –û–ë–©–ò–ï –í–´–í–û–î–´:")
    print("=" * 60)
    
    if success1:
        print("‚úÖ –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Ä–æ—É—Ç–∏–Ω–≥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç")
    else:
        print("‚ùå –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã –≤ –ª–æ–≥–∏–∫–µ —Ä–æ—É—Ç–∏–Ω–≥–∞")
    
    print("\nüí° –ü–†–ï–ò–ú–£–©–ï–°–¢–í–ê –ù–û–í–û–ì–û –ü–û–î–•–û–î–ê:")
    print("   üéØ –†–∞—Å–ø–æ–∑–Ω–∞—ë—Ç –≤–Ω–µ—à–Ω–∏–µ —Å—Å—ã–ª–∫–∏")
    print("   üß† –ò–∑–≤–ª–µ–∫–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ URL")
    print("   üí¨ –§–æ—Ä–º–∏—Ä—É–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã") 
    print("   üîÑ –ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç —Ä–µ–∂–∏–º—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏")
    print("   üìà –ü–æ–≤—ã—à–∞–µ—Ç –∫–æ–Ω–≤–µ—Ä—Å–∏—é –ª–∏–¥–æ–≤")

if __name__ == "__main__":
    main() 